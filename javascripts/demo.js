// Here is our sample data. It is an array of objects with each element having a name property and a weapon or two.

var oData = [ { name: "Mr. Pink", guns: 1 }, { name: "Mr. Blonde", guns: 0, knives: 1 }, { name: "Mr. White", guns: 2 }, { name: "Mr. Orange", guns: 1 } ];

// This would be our sync function, our server would get the data from the
// database and then send it to the client ensuring that both server and client
// have the same initial data.

var sData = Tome.conjure(oData);
var cData = Tome.conjure(oData);

// We need a processing variable so that we know which context is performing
// the operation.

var processing;

// newLine is a function that we use to display the diffs, appending each diff
// with the context to the end of the log.

function newLine(source, text) {
	var dRepresentation = document.getElementById('dRepresentation');
	var output = document.createElement('span');
	output.textContent = '\u003C' + source + '\u003E ' + text;
	dRepresentation.appendChild(output);
	dRepresentation.appendChild(document.createElement('br'));
	dRepresentation.scrollTop = dRepresentation.scrollHeight;
}

// DOMify is not used at the moment.

function DOMify(t, d) {
	var sE, sL, sV, i, len, k, n;
	switch (Tome.typeOf(t)) {
	case 'array':
		if (d.tagName !== 'UL') {
			n = document.createElement('UL');
			n.id = d.id;
			n.className = d.className;
			d.parentNode.replaceChild(n, d);
			d = n;
		}
		for (i = 0, len = t.length; i < len; i++) {
			sE = document.getElementById(d.id + '-' + i);
			if (!sE) {
				sE = document.createElement('LI');
				sE.id = d.id + '-' + i;
			} else if (sE.tagName !== 'LI') {
				n = document.createElement('LI');
				n.id = d.id + '-' + i;
				d.replaceChild(n, sE);
				sE = n;
			}
			DOMify(t[i], sE);
			d.appendChild(sE);
		}
		break;
	case 'object':
		for (k in t) {
			if (t.hasOwnProperty(k)) {
				sE = document.getElementById(d.id + '-' + k);
				if (!sE) {
					sE = document.createElement('DIV');
					sE.id = d.id + '-' + k;
					d.appendChild(sE);
				} else if (sE.tagName !== 'DIV') {
					n = document.createElement('DIV');
					n.id = d.id + '-' + k;
					d.replaceChild(n, sE);
					sE = n;
				}
				sL = document.getElementById(d.id + '-' + k + '-label');
				if (!sL) {
					sL = document.createElement('SPAN');
					sL.id = d.id + '-' + k + '-label';
					sL.textContent = k + ': ';
					sE.appendChild(sL);
				} else if (sL.tagName !== 'SPAN') {
					n = document.createElement('SPAN');
					n.id = d.id + '-' + k + '-label';
					n.textContent = k + ': ';
					sE.replaceChild(n, sL);
				} else {
					sL.textContent = k + ': ';
				}
				sV = document.getElementById(d.id + '-' + k + '-value');
				if (!sV) {
					sV = document.createElement('SPAN');
					sV.id = d.id + '-' + k + '-value';
					DOMify(t[k], sV);
					sE.appendChild(sV);
				} else if (sV.tagName !== 'SPAN') {
					n = document.createElement('SPAN');
					n.id = d.id + '-' + k + '-value';
					DOMify(t[k], n);
					sE.replaceChild(n, sV);
				} else {
					DOMify(t[k], sV);
				}
			}
		}
		break;
	case 'string':
	case 'boolean':
	case 'number':
		d.textContent = t.valueOf();
		break;
	}
}

function contentLoaded() {

	// Now that our content is loaded we can start modifying the DOM.

	// First we fill in our textareas with some sample commands.

	var sTextarea = document.getElementById('sTextarea');
	var cTextarea = document.getElementById('cTextarea');

	sTextarea.textContent = 'sData[0].guns.inc(1);';
	cTextarea.textContent = 'cData.push({ name: \'Mr. Blue\', guns: 1 });\ncData[0].name.assign(\'Steve Buscemi\');';

	// Now wire up some click event handlers to handle executing our commands.

	var s2c = document.getElementById('s2c');
	s2c.addEventListener("click", function handleS2C (e) {
		processing = 'sData';
		try {
			eval(sTextarea.value);
		} catch (error) {
			newLine(processing, error);
		}
		e.preventDefault();
		e.stopPropagation();
	}, false);

	var c2s = document.getElementById('c2s');
	c2s.addEventListener("click", function handleC2S (e) {
		processing = 'cData';
		try {
			eval(cTextarea.value);
		} catch (error) {
			newLine(processing, error);
		}
		e.preventDefault();
		e.stopPropagation();
	}, false);

	// Now we wire up the log area to get the diffs that are generated by our
	// commands.

	sData.on('diff', function handleSDiff (JSONDiff) {
		if (processing === 'sData') {
			newLine(processing, JSON.stringify(JSONDiff));
			cData.batch(JSONDiff);
		}
	});

	cData.on('diff', function handleCDiff (JSONDiff) {
		if (processing === 'cData') {
			newLine(processing, JSON.stringify(JSONDiff));
			sData.batch(JSONDiff);
		}
	});

	// Now we wire up the string representations of our data to update when
	// changes are made.


	sData.on('signal', function handleSSignal (value) {
		var sRepresentation = document.getElementById('sRepresentation');
		// DOMify(value, sRepresentation);
		sRepresentation.textContent = 'var sData = ' + JSON.stringify(value);
		sRepresentation.scrollTop = sRepresentation.scrollHeight;
	});

	cData.on('signal', function handleCSignal (value) {
		var cRepresentation = document.getElementById('cRepresentation');
		// DOMify(value, cRepresentation);
		cRepresentation.textContent = 'var cData = ' + JSON.stringify(value);
		cRepresentation.scrollTop = cRepresentation.scrollHeight;
	});
}

// And finally we add an event listener to trigger our DOM modifications once
// the page is loaded and ready to be modified.

document.addEventListener("DOMContentLoaded", contentLoaded);